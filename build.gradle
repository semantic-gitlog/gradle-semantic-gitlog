plugins {
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.12.0'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'pmd'
    id "io.freefair.lombok" version "5.2.1"
    id 'team.yi.semantic-gitlog' version '0.5.13'
}

group = 'team.yi.gradle.plugin'
description = 'A simple `Semantic Versioning` management tool based on `Conventional Commits`.'
version = '0.5.17'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
generateLombokConfig.enabled = false

checkstyle.toolVersion = '8.35'
pmd.toolVersion = '6.26.0'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api gradleApi()

    // https://mvnrepository.com/artifact/team.yi.tools/semantic-gitlog
    api 'team.yi.tools:semantic-gitlog:0.7.0'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
}

lombok {
    version = "1.18.12"
}

gradlePlugin {
    plugins {
        changelogPlugin {
            id = 'team.yi.semantic-gitlog'
            implementationClass = 'team.yi.gradle.plugin.ChangelogPlugin'
            displayName = 'gradle-semantic-gitlog'
        }
    }
}

pluginBundle {
    website = 'https://github.com/semantic-gitlog/gradle-semantic-gitlog'
    vcsUrl = 'https://github.com/semantic-gitlog/gradle-semantic-gitlog'
    description = 'gradle-semantic-gitlog'
    tags = ['versioning', 'semantic-versioning', 'git', 'auto-versioning', 'version']

    plugins {
        changelogPlugin {
            id = 'team.yi.semantic-gitlog'
            displayName = 'gradle-semantic-gitlog'
        }
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Checkstyle) {
    ignoreFailures = false

    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Pmd) {
    ruleSetFiles = files("${rootDir}/config/pmd/rulesets.xml")
    ruleSets = []
    ignoreFailures = false

    reports {
        xml.enabled false
        html.enabled true
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = project.group
            artifactId = "gradle-semantic-gitlog"

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            // https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/semantic-gitlog/gradle-semantic-gitlog'
                inceptionYear = '2020'

                scm {
                    url = 'https://github.com/semantic-gitlog/gradle-semantic-gitlog'
                    connection = 'scm:git:git@github.com:semantic-gitlog/gradle-semantic-gitlog.git'
                    developerConnection = 'scm:git:git@github.com:semantic-gitlog/gradle-semantic-gitlog.git'
                }

                licenses {
                    license {
                        name = "MIT"
                        url = 'https://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }

                organization {
                    name = "Yi.Team"
                    url = 'https://yi.team/'
                }

                developers {
                    developer {
                        name = "ymind"
                        email = 'ymind@yi.team'
                        url = 'https://yi.team/'
                        organization = 'Yi.Team'
                        organizationUrl = 'https://yi.team/'
                    }
                }

                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/semantic-gitlog/gradle-semantic-gitlog/issues'
                }

                ciManagement {
                    system = 'GitHub'
                    url = 'https://github.com/semantic-gitlog/gradle-semantic-gitlog/actions'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"

            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = System.getenv("OSSRH_USERNAME") ?: "${project.properties["OSSRH_USERNAME"]}"
                password = System.getenv("OSSRH_TOKEN") ?: "${project.properties["OSSRH_TOKEN"]}"
            }
        }
    }
}

signing {
    project.ext.set("signing.keyId", System.getenv("OSSRH_GPG_SECRET_ID") ?: "${project.properties["OSSRH_GPG_SECRET_ID"]}")
    project.ext.set("signing.secretKeyRingFile", System.getenv("OSSRH_GPG_SECRET_KEY") ?: "${project.properties["OSSRH_GPG_SECRET_KEY"]}")
    project.ext.set("signing.password", System.getenv("OSSRH_GPG_SECRET_PASSWORD") ?: "${project.properties["OSSRH_GPG_SECRET_PASSWORD"]}")

    sign(publishing.publications.getByName("mavenJava"))
}

// ./gradlew setNewVersion -P newVersion=2.1.3
task setNewVersion {
    println version

    if (project.hasProperty('newVersion')) {
        println "Set Project to new Version $newVersion"

        String s = buildFile.getText().replaceFirst("version = '$version'", "version = '$newVersion'")

        buildFile.setText(s)
    }
}

changelog {
    toRef = "master"

    jsonFile = file("${rootDir}/CHANGELOG.json")
    fileSets = [
        {
            template = file("${rootDir}/config/gitlog/CHANGELOG.md.mustache")
            target = file("${rootDir}/CHANGELOG.md")
        },
        {
            template = file("${rootDir}/config/gitlog/CHANGELOG.zh-cn.md.mustache")
            target = file("${rootDir}/CHANGELOG.zh-cn.md")
        }
    ]
    commitLocales = [
        "en"   : file("${rootDir}/config/gitlog/commit-locales.md"),
        "zh-cn": file("${rootDir}/config/gitlog/commit-locales.zh-cn.md")
    ]
    scopeProfiles = [
        "en"   : file("${rootDir}/config/gitlog/commit-scopes.md"),
        "zh-cn": file("${rootDir}/config/gitlog/commit-scopes.zh-cn.md")
    ]
    issueUrlTemplate = "https://github.com/semantic-gitlog/gradle-semantic-gitlog/issues/:issueId"
    commitUrlTemplate = "https://github.com/semantic-gitlog/gradle-semantic-gitlog/commit/:commitId"
    mentionUrlTemplate = "https://github.com/:username"

    outputs.upToDateWhen { false }
}

derive {
    toRef = "master"
    derivedVersionMark = "NEXT_VERSION:=="

    commitLocales = [
        "en"   : file("${rootDir}/config/gitlog/commit-locales.md"),
        "zh-cn": file("${rootDir}/config/gitlog/commit-locales.zh-cn.md")
    ]
    scopeProfiles = [
        "en"   : file("${rootDir}/config/gitlog/commit-scopes.md"),
        "zh-cn": file("${rootDir}/config/gitlog/commit-scopes.zh-cn.md")
    ]

    outputs.upToDateWhen { false }
}
